# vim: ft=zsh fdm=marker
# Prelude {{{

# source ~/.zprofile
_zshdir=$LIB/zsh
export ZPLUGS=$_zshdir/plugs

# Shell common aliases and functions
source $ETC/shell/shrc_common

# }}}
# Environment {{{

# the best - ^PATTERN
setopt extended_glob
#  Sort globs that expand to numbers numerically, not by letter (i.e. 01 2 03)
setopt numeric_glob_sort
# gti -> git
setopt correct
# tuning correct
autoload -U colors && colors
export SPROMPT="Correct $fg[red]%R$reset_color to $fg[yellow]%r$reset_color?"
## warning if file exists ('cat /dev/null > ~/.zshrc')
#setopt NO_clobber
## alert me if something failed
#setopt printexitvalue
## Allow comments even in interactive shells
#setopt interactivecomments
# {a-cz} -> a b c z
set -o braceccl
# no C-S & C-Q. For zsh 
unsetopt flow_control
## for other programs (it can be set in terminal emulator)
#stty -ixon
# rm * OR path/* without any questions
setopt rm_star_silent
# Like every other echo: do not interprete \t etc.
setopt bsd_echo

# }}}
# History {{{

export HISTFILE=$_zshdir/zsh_history
# N events (lines)
export HISTSIZE=10000
export SAVEHIST=10000
## for multiple zsh sessions
setopt append_history
# Add commands to history as they are typed, don't wait until shell exit
setopt inc_append_history
# Remove extra blanks from each command line being added to history
setopt hist_reduce_blanks
# Timestamps in history file
setopt extended_history
# Do not save any dups - there are other options 
setopt hist_ignore_all_dups
# !expansion do not execute but just in buffer
setopt hist_verify
## Shares history across multiple zsh sessions, in real time
setopt share_history

# }}}
# {{{ Global aliases
alias -g HH='|head'
alias -g HL=' --help |& less -eFiRX -r'
# alias -g K='|keep'
# TODO remove v (?)
# alias -g L='| less -eFiRX'
alias -g LL='|& less -eFiRX'
# alias -g LL='|& less -r -eFiRX'
alias -g VV='|& vv'
# alias -g M='|most'
# alias -g R='| tr A-z N-za-m'
# alias -g SL='| sort | less'
alias -g SS='|sort'
alias -g TT='|tail'
alias -g GG='|grep -i'
alias -g CC='|wc -l'
alias -g NN='&>/dev/null'

# }}}
# Prompt {{{
# my attemp

prompt_yazu_setup ()
{
  unset PS1
  unset PS2
  unset PROMPT
  unset PROMPT2
  unset RPROMPT
  unset RPROMPT2

  # set prompt_cr prompt_percent prompt_subst prompt_sp
  prompt_opts=( cr percent subst sp )
  autoload -Uz colors && colors
  #add-zsh-hook precmd prompt_yazu_precmd
  precmd_functions+=(prompt_yazu_precmd)
}

prompt_yazu_precmd()
{
    # %(0?.GOOD_EXIT.BAD_EXIT)
    # %B - bold %F{color} %f%b - reset

    local exit_status=$?
    local len=2
    print -n "  "

    local njobs='%(1j.%%%j .)'
    njobs=${(%)njobs}
    if [[ $njobs != "" ]]; then
        ((len = len + ${#njobs}))
        # % in $njobs so we need another to escape
        print -Pn "%F{white}%$njobs"
    fi

    # when CTRL-Z then exit status SIGTSTP and "error" too
    # fix it
    local sigtstp=$(kill -l TSTP)
    if [[ $exit_status -ne 0 &&
          $exit_status -ne $sigtstp &&
          $exit_status -ne (($sigtstp + 128)) ]]; then
        ((len = len + 5 + ${#exit_status}))
        print -Pnr "%B%F{red}!ok $exit_status "
    else
        ((len += 3))
        print -Pnr "%B%F{yellow}ok "
    fi

    local me='%1m@%n'
    me=${(%)me}
    # space + [ + ]
    (( len += ${#me} + 3 ))

    vcs_info

    local free=$((COLUMNS-len-1))
    print -nPr "%B%F{black}"
    if [[ -z ${vcs_info_msg_0_} ]]; then
    # You shouldn't mics printing with escape-codes and with length
        print -nPrf "%${free}s" \
                    "%$((free-1))<...<%~%"
    else
        # TODO Shorten if more then $free
        print -nPrf "%${free}s" $vcs_info_msg_0_
    fi
    # print -n " [$me]"
    print -nPr " %b%F{magenta}[%B%F{green}$me%b%F{magenta}]"
    print -Pr '%f%b'
}

prompt_yazu_setup "$@"

autoload -Uz vcs_info
zstyle ':vcs_info:*' enable git
zstyle ':vcs_info:*' check-for-changes true
zstyle ':vcs_info:*' get-revision true
zstyle ':vcs_info:git*' formats "(%s) %r/%S %b %m%u%c"

autoload -U promptinit && promptinit
prompt_themes+=( yazu )

prompt yazu
# }}}
# {{{ Plugins

# possible plugins:
# endaaman/lxd-completion-zsh
VIM_MODE_ESC_PREFIXED_WANTED='^?^Hbdfhul.g['
plugins=(
    softmoth/zsh-vim-mode
    Aloxaf/fzf-tab
    zsh-users/zsh-syntax-highlighting
    zsh-users/zsh-history-substring-search
)

zup() {
    if [[ ! -d $ZPLUGS ]]; then
        # Initiation
        mkdir -p $ZPLUGS && cd $ZPLUGS || 
            { echo "Something wrong with $ZPLUGS" >&2; return 1; }
    fi

    cd $ZPLUGS
    for repo in $plugins; do
        local url=https://github.com/$repo
        local r=${repo##*/}
        if [[ -d $r ]]; then
            cd $r
            echo $r
            git pull 
            cd ..
        else
            git clone $url 
        fi
    done
}


zplugs() {
    oldpwd=`pwd`
    [[ -d $ZPLUGS ]]  && cd $ZPLUGS || 
        { echo "Something wrong with $ZPLUGS" >&2; return 1; }
    for repo in $plugins; do
        repo=${repo##*/}
        cd $ZPLUGS/$repo &&
        source $repo.plugin.zsh ||
        { echo "Something wrong with $$repo" >&2; return 1; }
    done
    cd $oldpwd
}

[[ ! -d $ZPLUGS ]]  && zup

zplugs

# Tweaks and fixing for plugins
unalias run-help 2>/dev/null
autoload run-help

MODE_CURSOR_VICMD='steady block'
MODE_CURSOR_DEFAULT='steady bar'

# MODE_INDICATOR_VIINS='%F{white}  %f'
# MODE_INDICATOR_VIINS='%F{white}  %f'
# MODE_INDICATOR_VIINS='%F{white}  %f'
# MODE_INDICATOR_VIINS='%F{white}%f'
# MODE_INDICATOR_VICMD='%F{white}גּ  %f'
MODE_INDICATOR_VICMD='%F{white}  %f'
# !!! Remove any right prompt from display when accepting a command line.
setopt transientrprompt

# restore from vim-mode bindings
# history-beginning-search-backward
bindkey "${terminfo[kcuu1]}" up-line-or-search
bindkey "${terminfo[kcud1]}" down-line-or-search
bindkey "^P" history-beginning-search-backward
bindkey "^N" history-beginning-search-forward
bindkey -M vicmd '^[h' run-help
bindkey -M viins '^[h' run-help

# here for completness
zle -N history-beginning-search-backward-end \
       history-search-end
zle -N history-beginning-search-forward-end \
       history-search-end
bindkey '\ep' history-beginning-search-backward-end
bindkey '\en' history-beginning-search-forward-end

# }}}
# {{{ Fzf

# antigen bundle unixorn/fzf-zsh-plugin

# **, Ctrl-t, Alt-c, Ctrl-r
# **<Tab> trigger fzf for files
# C-t the same with fancy option
# C-r command history
# Alt-c cd BUT NOT -> Ctrl-G
# try tab after set, export, alias, kill - fancy
# test -f $HOME/.local/share/fzf/completion.zsh && source $HOME/.local/share/fzf/completion.zsh
# test -f $HOME/.local/share/fzf/key-bindings.zsh && source $HOME/.local/share/fzf/key-bindings.zsh


if [[ -d $HOME/.local/share/fzf ]]; then 
    export FZF_BASE=$HOME/.local/share/fzf
elif [[ -d /usr/share/fzf/shell ]]; then
    export FZF_BASE=/usr/share/fzf/shell
elif [[ -d /usr/share/fzf ]]; then
    export FZF_BASE=/usr/share/fzf
else
    echo No fzf\? >&2
fi

source $FZF_BASE/completion.zsh
source $FZF_BASE/key-bindings.zsh

export FZF_TMUX_OPTS='-d 40%'
# install highlight
export FZF_CTRL_T_OPTS="--preview '(highlight -O ansi -l {} 2> /dev/null \
                         || bat {} || tree -C {}) 2> /dev/null | head -200'"
# ? for long commands
export FZF_CTRL_R_OPTS="--preview 'echo {}' --preview-window \
                        down:3:hidden:wrap --bind '?:toggle-preview'"
export FZF_ALT_C_OPTS="--preview 'tree -C {} | head -200'"

# Setting fd as the default source for fzf
export FZF_DEFAULT_COMMAND='fd --type file --hidden --no-ignore'
# To apply the command to CTRL-T as well
export FZF_CTRL_T_COMMAND="$FZF_DEFAULT_COMMAND"

### Conflict with zsh-vim-mode plugin
# I need restore. Why?
zle     -N            fzf-history-widget
bindkey -M emacs '^R' fzf-history-widget
bindkey -M vicmd '^R' fzf-history-widget
bindkey -M viins '^R' fzf-history-widget

# ^G expands variable. ^Xg or ^XG do the same
zle     -N             fzf-cd-widget
bindkey -M emacs '^G' fzf-cd-widget
bindkey -M vicmd '^G' fzf-cd-widget
bindkey -M viins '^G' fzf-cd-widget

#### USE ALT-C for vicmd
bindkey -M emacs "^[c" vi-cmd-mode
bindkey -M viins "^[c" vi-cmd-mode
bindkey -M viins "^[c" vi-cmd-mode

# }}}
# Completion {{{

# no need - I ignore all dups
# zstyle ':completion:*' remove-all-dups true

# changed completer settings
# ??? setopt complete_aliases
# ???????
zstyle ':completion:*' completer _complete _correct _approximate
zstyle ':completion:*' expand prefix suffix
zstyle ':completion:*' completer _expand_alias _complete _approximate

#  Allow completion from within a word/phrase
setopt complete_in_word

zmodload 'zsh/complist'

# fzd-tab for all this stuff ? 
zle -C all-matches complete-word _generic
zstyle ':completion:all-matches:*' old-matches only
zstyle ':completion:all-matches::::' completer _all_matches
zstyle ':completion:*' menu yes select=10
bindkey -M menuselect 'h' vi-backward-char        # left
bindkey -M menuselect 'k' vi-up-line-or-history   # up
bindkey -M menuselect 'l' vi-forward-char         # right
bindkey -M menuselect 'j' vi-down-line-or-history # bottom

zstyle ':completion:*:*:*:*:corrections' format '%F{yellow}!- %d (errors: %e) -!%f'

# Only for comletitions which use it. Which ones?
zstyle ':completion:*' use-cache on
zstyle ':completion:*' cache-path "$XDG_CACHE_HOME/zsh/zcompcache"

# After everything? dump file to .cache
autoload -Uz compinit && compinit -d "$XDG_CACHE_HOME/zsh/zcompcache"

# }}}
# Keys {{{

## set command prediction from history, see 'man 1 zshcontrib'
#is4 && zrcautoload predict-on && \
#zle -N predict-on         && \
#zle -N predict-off        && \
#bindkey "^X^Z" predict-on && \
#bindkey "^Z" predict-off

## define word separators (for stuff like backward-word, forward-word, backward-kill-word,..)
#WORDCHARS='*?_-.[]~=/&;!#$%^(){}<>' # the default
#WORDCHARS=.
#WORDCHARS='*?_[]~=&;!#$%^(){}'
#WORDCHARS='${WORDCHARS:s@/@}'
WORDCHARS=${WORDCHARS//[&=\/;!#%\{.-]}

# ???
# without this, typing a . aborts incremental history search
# bindkey -M isearch . self-insert

# useful for mv, cp
bindkey "\e=" copy-prev-shell-word
# bindkey '\e,' copy-prev-shell-word

bindkey '^q' quote-line
bindkey '\eq' push-line-or-edit

# insert new line
bindkey '\e^m' self-insert-unmeta

# ^K is for vim-tmux-navigation
# but ^K from zsh-vim-mode plugin
bindkey '\ek' kill-line

bindkey -s "$terminfo[kf5]" "^A(^E >/dev/null 2>&1 &)^M"

# try 2022/06/18
bindkey -s "^\^" "\^\^^b"

# }}}
# {{{ Misc

autoload -Uz zed
autoload -U zmv
alias zmv='noglob zmv'

# }}}
# {{{ CD

# Set a search path for the cd builtin
cdpath=(.. ~ ~/etc ~/proj ~/work)

# type only the name of dir
setopt autocd

# named dirs
hash -d -r
hash -d l=$XDG/load
hash -d t=$XDG/top
hash -d e=$ETC
hash -d lib=$LIB
hash -d n=$NOTES

setopt auto_pushd
alias p='popd >/dev/null && ls
'
alias dirs='builtin dirs -pv'

# }}}
# {{{ Local

# Manjaro
if [[ -r /usr/share/zsh/functions/command-not-found.zsh ]]; then
    source /usr/share/zsh/functions/command-not-found.zsh
# Debian
elif [[ -r /etc/zsh_command_not_found ]]; then 
        source /etc/zsh_command_not_found
# WSL
# elif grep -qi microsoft /proc/version; then
elif [[ -f /proc/sys/fs/binfmt_misc/WSLInterop ]]; then
     source $ETC/local/wslrc
fi

# for experiments
[[ -f $ETC/local/localrc ]] && . $ETC/local/localrc || true

# }}}
